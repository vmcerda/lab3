import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Random;
import java.util.Scanner;

public class HashTest {

    private static String dataType, debug = "";
    private static int insert, randNum = 0;
    private static double alpha;
    private static Random rand = new Random();
    private static long longNum;

    public static void main(String[] args) throws IOException {

        if (args.length < 2) {
            help();
            System.exit(0);
        }
        dataType = args[0];
        alpha = Double.parseDouble(args[1]);
        if (args.length == 3) {
            debug = args[2];
        }
        PrimeCheck prime = new PrimeCheck(95500, 96000);
        int size = prime.findPrime();
        if(size != prime.findPrime()){
            System.out.println("No Prime Number found");
            System.exit(0);
        }
        HashTable linearTable = new HashTable(size, HashTable.HashType.LINEAR);
        HashTable doubleTable = new HashTable(size, HashTable.HashType.DOUBLE);
            if (dataType.equals("1")) {
                dataType = "Integer";
                while(linearTable.tableRatio() < alpha) {
                    randNum = rand.nextInt();
                    linearTable.add(randNum);
                    doubleTable.add(randNum);
                }
            } else if (dataType.equals("2")) {
                dataType = "Long";
                //Long Object generated by System.currentTimeMillis()
                while(linearTable.tableRatio() < alpha) {
                    longNum = System.currentTimeMillis();
                    linearTable.add(longNum);
                    doubleTable.add(longNum);
                }
            } else if (dataType.equals("3")){
                try {
                    File file = new File("./word-list");
                    Scanner scanner = new Scanner(file);
                    while (scanner.hasNext() && linearTable.tableRatio() < alpha){
                        String word = scanner.nextLine();
                        linearTable.add(word);
                        doubleTable.add(word);
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println("Incorrect Input Type");
                help();
                System.exit(0);
            }
        if(!debug.equals("1")) {
            System.out.format("A good table size is found: %d\nData source type: %s" + "\n\n", size, dataType);
        }
        linearTable.dump(debug,alpha);
        doubleTable.dump(debug,alpha);
    }

    private static void help() {
        System.out.println("---Incorrect arguments ---");
        System.out.println("Usage: java HashTest <input type> <load factor> [<debug level>]");
        System.out.println("Input type: 1, 2, 3");
        System.out.println("Load Factor: 0 < x < 1");
        System.out.println("[Debug level: 0 (primary summary) or 1 (summary with hashtable, # of duplicates/probes into a files]");
    }
}